{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/Cian/Desktop/websites/hackeryou/projects/project 6/proj-repo/TorontoBikeShareRaces/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/Users/Cian/Desktop/websites/hackeryou/projects/project 6/proj-repo/TorontoBikeShareRaces/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/Cian/Desktop/websites/hackeryou/projects/project 6/proj-repo/TorontoBikeShareRaces/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar swal = _interopDefault(require('sweetalert'));\n\nvar index =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var newOptions,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getOptions.apply(void 0, _args);\n\n          case 2:\n            newOptions = _context.sent;\n            return _context.abrupt(\"return\", swal(newOptions));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function index() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar bindActions = function bindActions(swalInstance) {\n  for (var method in swal) {\n    swalInstance[method] = swal[method];\n  }\n};\n\nvar getOptions =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(params, _ref2) {\n    var identifier, transformer, newOptions, lastParam;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            identifier = _ref2.identifier, transformer = _ref2.transformer;\n            _context2.next = 3;\n            return transformParams(params, identifier, transformer);\n\n          case 3:\n            newOptions = _context2.sent;\n            newOptions = Object.assign({}, parseTextParams(params), newOptions);\n            lastParam = params[params.length - 1];\n            /*\n             * So that we don't lose other specified options\n             * such as buttons... etc.\n             */\n\n            if (isOptionsParam(lastParam, identifier)) {\n              newOptions = Object.assign({}, lastParam, newOptions);\n            }\n\n            return _context2.abrupt(\"return\", newOptions);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getOptions(_x, _x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar parseTextParams = function parseTextParams(params) {\n  var options = {};\n\n  var isString = function isString(param) {\n    return typeof param === \"string\";\n  };\n\n  if (isString(params[0]) && !isString(params[1])) {\n    options.text = params[0];\n  }\n\n  if (isString(params[1])) {\n    options.title = params[0];\n    options.text = params[1];\n  }\n\n  if (isString(params[2])) {\n    options.icon = params[2];\n  }\n\n  return options;\n}; // Return true if param is a SwalOptions object\n\n\nvar isOptionsParam = function isOptionsParam(param, isTransformable) {\n  return param.constructor === Object && !isTransformable(param);\n};\n/*\n * @params: (SwalParams, Function, Function, boolean)\n * @returns: SwalOptions\n */\n\n\nvar transformParams =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(params, isTransformable, transformer) {\n    var isAsync, transformSingleParam, transformContentOption, newOpts;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            // Check if the transform returns a DOM synchronously\n            // or if it is a promise:\n            isAsync = transformer() instanceof Promise;\n            /*\n             * Example:\n             *   swal(<div>Hello!</div>);\n             */\n\n            transformSingleParam =\n            /*#__PURE__*/\n            function () {\n              var _ref5 = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee3() {\n                var el, newContent;\n                return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        el = params[0];\n\n                        if (isTransformable(el)) {\n                          _context3.next = 3;\n                          break;\n                        }\n\n                        return _context3.abrupt(\"return\");\n\n                      case 3:\n                        _context3.next = 5;\n                        return transformEl(el, transformer, isAsync);\n\n                      case 5:\n                        newContent = _context3.sent;\n                        return _context3.abrupt(\"return\", {\n                          content: newContent\n                        });\n\n                      case 7:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n\n              return function transformSingleParam() {\n                return _ref5.apply(this, arguments);\n              };\n            }();\n            /*\n             * Example:\n             *   swal(\"Hi\", { \n             *     content: <div>Hello!</div> \n             *   })\n             */\n\n\n            transformContentOption =\n            /*#__PURE__*/\n            function () {\n              var _ref6 = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee4() {\n                var lastParamIndex, lastParam, content, button;\n                return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        lastParamIndex = params.length - 1;\n                        lastParam = params[lastParamIndex];\n\n                        if (!(!lastParam || !lastParam.content)) {\n                          _context4.next = 4;\n                          break;\n                        }\n\n                        return _context4.abrupt(\"return\");\n\n                      case 4:\n                        content = lastParam.content, button = lastParam.button;\n\n                        if (!isTransformable(content)) {\n                          _context4.next = 9;\n                          break;\n                        }\n\n                        _context4.next = 8;\n                        return transformEl(content, transformer, isAsync);\n\n                      case 8:\n                        content = _context4.sent;\n\n                      case 9:\n                        return _context4.abrupt(\"return\", {\n                          content: content //button,\n\n                        });\n\n                      case 10:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n\n              return function transformContentOption() {\n                return _ref6.apply(this, arguments);\n              };\n            }();\n            /*\n             * Only transform the params that can \n             * have a DOM node as their value\n             */\n\n\n            _context5.next = 5;\n            return Promise.all([transformSingleParam(), transformContentOption()]);\n\n          case 5:\n            newOpts = _context5.sent;\n            return _context5.abrupt(\"return\", Object.assign.apply(Object, [{}].concat(_toConsumableArray(newOpts))));\n\n          case 7:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function transformParams(_x3, _x4, _x5) {\n    return _ref4.apply(this, arguments);\n  };\n}(); // Transform a single option\n\n\nvar transformEl =\n/*#__PURE__*/\nfunction () {\n  var _ref7 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6(el, transformer, isAsync) {\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (!isAsync) {\n              _context6.next = 6;\n              break;\n            }\n\n            _context6.next = 3;\n            return transformer(el);\n\n          case 3:\n            _context6.t0 = _context6.sent;\n            _context6.next = 7;\n            break;\n\n          case 6:\n            _context6.t0 = transformer(el);\n\n          case 7:\n            return _context6.abrupt(\"return\", _context6.t0);\n\n          case 8:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function transformEl(_x6, _x7, _x8) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nexports['default'] = index;\nexports.bindActions = bindActions;","map":null,"metadata":{},"sourceType":"script"}